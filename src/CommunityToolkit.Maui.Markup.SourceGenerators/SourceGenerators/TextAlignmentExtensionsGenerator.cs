using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace CommunityToolkit.Maui.Markup.SourceGenerators;

[Generator(LanguageNames.CSharp)]
class TextAlignmentExtensionsGenerator : IIncrementalGenerator
{
	const string iTextAlignmentInterface = "Microsoft.Maui.ITextAlignment";
	const string mauiControlsAssembly = "Microsoft.Maui.Controls";

	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		// Get Microsoft.Maui.Controls Assembly Symbol
		var mauiControlsAssemblySymbolProvider = context.CompilationProvider.Select(
			static (compilation, token) => compilation.SourceModule.ReferencedAssemblySymbols.Single(q => q.Name == mauiControlsAssembly));

		var inputs = mauiControlsAssemblySymbolProvider
						.Combine(context.CompilationProvider)
						.Select(static (combined, cancellationToken) => (MauiControlsAssemblySymbolProvider: combined.Left, Compilation: combined.Right));

		context.RegisterSourceOutput(inputs, (context, collectedValues) =>
			Execute(context, collectedValues.Compilation, collectedValues.MauiControlsAssemblySymbolProvider));
	}

	static void Execute(SourceProductionContext context, Compilation compilation, IAssemblySymbol mauiControlsAssemblySymbolProvider)
	{
		var textAlignmentSymbol = compilation.GetTypeByMetadataName(iTextAlignmentInterface);

		if (textAlignmentSymbol is null)
		{
			var diag = Diagnostic.Create(TextAlignmentDiagnostics.MauiReferenceIsMissing, Location.None);
			context.ReportDiagnostic(diag);
			return;
		}

		var textAlignmentClassList = new List<(string ClassName, string ClassAcessModifier, string Namespace, string GenericArguments, string GenericConstraints)>();

		// Collect Microsoft.Maui.Controls that Implement ITextAlignment
		var mauiTextStyleImplementors = mauiControlsAssemblySymbolProvider.GlobalNamespace.GetNamedTypeSymbols().Where(x => x.AllInterfaces.Contains(textAlignmentSymbol, SymbolEqualityComparer.Default));

		foreach (var namedTypeSymbol in mauiTextStyleImplementors)
		{
			textAlignmentClassList.Add((namedTypeSymbol.Name, "public", namedTypeSymbol.ContainingNamespace.ToDisplayString(), namedTypeSymbol.TypeArguments.GetGenericTypeArgumentsString(), namedTypeSymbol.GetGenericTypeConstraintsAsString()));
		}

		var options = ((CSharpCompilation)compilation).SyntaxTrees[0].Options as CSharpParseOptions;
		foreach (var textAlignmentClass in textAlignmentClassList)
		{
			var textColorToBuilder = @"
// <auto-generated>
// See: CommunityToolkit.Maui.Markup.SourceGenerators.TextAlignmentGenerator
#nullable enable

using Microsoft.Maui;
using Microsoft.Maui.Controls;

namespace CommunityToolkit.Maui.Markup
{
	/// <summary>
	/// Extension Methods for <see cref=""ITextAlignment""/>
	/// </summary>
	public static partial class TextAlignmentExtensions
	{
		/// <summary>
		/// <see cref=""ITextAlignment.HorizontalTextAlignment""/> = <see cref=""TextAlignment.Start""/>
		/// </summary>
		/// <param name=""textAlignmentControl""></param>
		/// <returns>" + textAlignmentClass.ClassName + @" with added <see cref=""TextAlignment.Start""/></returns>
		public static " + textAlignmentClass.ClassName + @" TextStart(this " + textAlignmentClass.ClassName + @" textAlignmentControl)
		{
			textAlignmentControl.HorizontalTextAlignment = TextAlignment.Start;
			return textAlignmentControl;
		}

		/// <summary>
		/// <see cref=""ITextAlignment.HorizontalTextAlignment""/> = <see cref=""TextAlignment.Center""/>
		/// </summary>
		/// <param name=""textAlignmentControl""></param>
		/// <returns>" + textAlignmentClass.ClassName + @" with added <see cref=""TextAlignment.Center""/></returns>
		public static " + textAlignmentClass.ClassName + @" TextCenterHorizontal(this " + textAlignmentClass.ClassName + @" textAlignmentControl)
		{
			textAlignmentControl.HorizontalTextAlignment = TextAlignment.Center;
			return textAlignmentControl;
		}

		/// <summary>
		/// <see cref=""ITextAlignment.HorizontalTextAlignment""/> = <see cref=""TextAlignment.End""/>
		/// </summary>
		/// <param name=""textAlignmentControl""></param>
		/// <returns>" + textAlignmentClass.ClassName + @" with added <see cref=""TextAlignment.End""/></returns>
		public static " + textAlignmentClass.ClassName + @" TextEnd(this " + textAlignmentClass.ClassName + @" textAlignmentControl)
		{
			textAlignmentControl.HorizontalTextAlignment = TextAlignment.End;
			return textAlignmentControl;
		}

		/// <summary>
		/// <see cref=""ITextAlignment.VerticalTextAlignment""/> = <see cref=""TextAlignment.Start""/>
		/// </summary>
		/// <param name=""textAlignmentControl""></param>
		/// <returns>" + textAlignmentClass.ClassName + @" with added <see cref=""TextAlignment.Start""/></returns>
		public static " + textAlignmentClass.ClassName + @" TextTop(this " + textAlignmentClass.ClassName + @" textAlignmentControl)
		{
			textAlignmentControl.VerticalTextAlignment = TextAlignment.Start;
			return textAlignmentControl;
		}

		/// <summary>
		/// <see cref=""ITextAlignment.VerticalTextAlignment""/> = <see cref=""TextAlignment.Center""/>
		/// </summary>
		/// <param name=""textAlignmentControl""></param>
		/// <returns>" + textAlignmentClass.ClassName + @" with added <see cref=""TextAlignment.Center""/></returns>
		public static " + textAlignmentClass.ClassName + @" TextCenterVertical(this " + textAlignmentClass.ClassName + @" textAlignmentControl)
		{
			textAlignmentControl.VerticalTextAlignment = TextAlignment.Center;
			return textAlignmentControl;
		}

		/// <summary>
		/// <see cref=""ITextAlignment.VerticalTextAlignment""/> = <see cref=""TextAlignment.End""/>
		/// </summary>
		/// <param name=""textAlignmentControl""></param>
		/// <returns>" + textAlignmentClass.ClassName + @" with added <see cref=""TextAlignment.End""/></returns>
		public static " + textAlignmentClass.ClassName + @" TextBottom(this " + textAlignmentClass.ClassName + @" textAlignmentControl)
		{
			textAlignmentControl.VerticalTextAlignment = TextAlignment.End;
			return textAlignmentControl;
		}

		/// <summary>
		/// <see cref=""ITextAlignment.VerticalTextAlignment""/> = <see cref=""ITextAlignment.HorizontalTextAlignment""/> = <see cref=""TextAlignment.Center""/>
		/// </summary>
		/// <param name=""textAlignmentControl""></param>
		/// <returns>" + textAlignmentClass.ClassName + @" with added <see cref=""TextAlignment.Center""/></returns>
		public static " + textAlignmentClass.ClassName + @" TextCenter(this " + textAlignmentClass.ClassName + @" textAlignmentControl)
			=> textAlignmentControl.TextCenterHorizontal().TextCenterVertical();
	}


	// The extensions in these sub-namespaces are designed to be used together with the extensions in the parent namespace.
	// Keep them in a single file for better maintainability

	namespace LeftToRight
    {
	    /// <summary>
	    /// Extension Methods for <see cref=""ITextAlignment""/>
	    /// </summary>
	    public static partial class TextAlignmentExtensions
	    {
		    /// <summary>
		    /// <see cref=""ITextAlignment.HorizontalTextAlignment""/> = <see cref=""TextAlignment.Start""/>
		    /// </summary>
		    /// <param name=""textAlignmentControl""></param>
		    /// <returns>" + textAlignmentClass.ClassName + @" with <see cref=""TextAlignment.Start""/></returns>
		    public static " + textAlignmentClass.ClassName + @" TextLeft(this " + textAlignmentClass.ClassName + @" textAlignmentControl)
		    {
			    textAlignmentControl.HorizontalTextAlignment = TextAlignment.Start;
			    return textAlignmentControl;
		    }

		    /// <summary>
		    /// <see cref=""ITextAlignment.HorizontalTextAlignment""/> = <see cref=""TextAlignment.End""/>
		    /// </summary>
		    /// <param name=""textAlignmentControl""></param>
		    /// <returns>" + textAlignmentClass.ClassName + @" with <see cref=""TextAlignment.End""/></returns>
		    public static " + textAlignmentClass.ClassName + @" TextRight(this " + textAlignmentClass.ClassName + @" textAlignmentControl)
		    {
			    textAlignmentControl.HorizontalTextAlignment = TextAlignment.End;
			    return textAlignmentControl;
		    }
	    }
    }

    // The extensions in these sub-namespaces are designed to be used together with the extensions in the parent namespace.
    // Keep them in a single file for better maintainability
    namespace RightToLeft
    {
	    /// <summary>
	    /// Extension methods for <see cref=""ITextAlignment""/>
	    /// </summary>
	    public static partial class TextAlignmentExtensions
	    {
		    /// <summary>
		    /// <see cref=""ITextAlignment.HorizontalTextAlignment""/> = <see cref=""TextAlignment.End""/>
		    /// </summary>
		    /// <param name=""textAlignmentControl""></param>
		    /// <returns>" + textAlignmentClass.ClassName + @" with <see cref=""TextAlignment.End""/></returns>
		    public static " + textAlignmentClass.ClassName + @" TextLeft(this " + textAlignmentClass.ClassName + @" textAlignmentControl)
		    {
			    textAlignmentControl.HorizontalTextAlignment = TextAlignment.End;
			    return textAlignmentControl;
		    }

		    /// <summary>
		    /// <see cref=""ITextAlignment.HorizontalTextAlignment""/> = <see cref=""TextAlignment.Start""/>
		    /// </summary>
		    /// <param name=""textAlignmentControl""></param>
		    /// <returns>" + textAlignmentClass.ClassName + @" with <see cref=""TextAlignment.Start""/></returns>
		    public static " + textAlignmentClass.ClassName + @" TextRight(this " + textAlignmentClass.ClassName + @" textAlignmentControl)
		    {
			    textAlignmentControl.HorizontalTextAlignment = TextAlignment.Start;
			    return textAlignmentControl;
		    }
	    }
    }
}";
			var source = textColorToBuilder.ToString();
			SourceStringExtensions.FormatText(ref source, options);
			context.AddSource($"{textAlignmentClass.ClassName}TextAlignmentExtensions.g.cs", SourceText.From(source, Encoding.UTF8));
		}
	}
}