using System.Runtime.InteropServices;
using NUnit.Framework;
using static CommunityToolkit.Maui.Markup.SourceGenerators.UnitTests.CSharpSourceGeneratorVerifier<CommunityToolkit.Maui.Markup.SourceGenerators.TextAlignmentExtensionsGenerator>;

namespace CommunityToolkit.Maui.Markup.SourceGenerators.UnitTests;

public class TextAlignmentExtensionsGeneratorTests
{
	static readonly string assemblyVersion = typeof(TextAlignmentExtensionsGenerator).Assembly.GetName().Version?.ToString() ?? throw new InvalidOleVariantTypeException("Assembly name cannot be null");
	static readonly string textAlignmentExtensionsGeneratorFullName = typeof(TextAlignmentExtensionsGenerator).Assembly.FullName ?? throw new InvalidOleVariantTypeException("Assembly fullname cannot be null");

	[Test]
	public async Task VerifyGeneratedSource_WhenClassImplementsITextAlignmentInterface()
	{
		// Arrange
		const string source = /* language=C#-test */ """
using Microsoft.Maui;
namespace MyNamespace;

public class MyClass : ITextAlignment
{
	public TextAlignment HorizontalTextAlignment { get; set; } = TextAlignment.Center;
	public TextAlignment VerticalTextAlignment { get; set; } = TextAlignment.Center;
}
""";

		// Act // Assert
		await VerifySourceGeneratorAsync(
			source,
			GenerateSourceCode(textAlignmentExtensionsGeneratorFullName,
				new("MyClass", "public", "MyNamespace", string.Empty, string.Empty, string.Empty)),
			[]);
	}

	[Test]
	public async Task VerifyGeneratedSource_WhenClassIsGeneric()
	{
		// Arrange
		const string source = /* language=C#-test */ """
using System;
using Microsoft.Maui;
namespace MyNamespace;

public class MyClass<T, U> : Microsoft.Maui.ITextAlignment
						  where T : IDisposable, new()
						  where U : class
{
	public TextAlignment HorizontalTextAlignment { get; set; } = TextAlignment.Center;
	public TextAlignment VerticalTextAlignment { get; set; } = TextAlignment.Center;
}
""";

		// Act // Assert
		await VerifySourceGeneratorAsync(
			source,
			GenerateSourceCode(textAlignmentExtensionsGeneratorFullName,
				new("MyClass", "public", "MyNamespace", "<T, U>", string.Empty, "where T : IDisposable, new() where U : class")),
			[]);
	}

	static string GenerateSourceCode(string fullClassName, TextAlignmentClassMetadata textAlignmentClassMetadata) =>
		/* language=C#-test */ $$"""
// <auto-generated>
// See: CommunityToolkit.Maui.Markup.SourceGenerators.TextAlignmentGenerator

#nullable enable
#pragma warning disable

using System;
using Microsoft.Maui;
using Microsoft.Maui.Controls;

namespace CommunityToolkit.Maui.Markup
{
   /// <summary>
   /// Extension Methods for <see cref="ITextAlignment"/>
   /// </summary>
   [global::System.CodeDom.Compiler.GeneratedCode("{{fullClassName}}", "{{assemblyVersion}}")]
   [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
   {{textAlignmentClassMetadata.ClassAccessModifier}} static partial class TextAlignmentExtensions_{{textAlignmentClassMetadata.ClassName}}
   {
       /// <summary>
       /// <see cref="ITextAlignment.HorizontalTextAlignment"/> = <see cref="TextAlignment.Start"/>
       /// </summary>
       /// <param name="textAlignmentControl"></param>
       /// <returns><typeparamref name="TAssignable"/> with added <see cref="TextAlignment.Start"/></returns>
       public static TAssignable TextStart{{textAlignmentClassMetadata.GenericTypeParameters}}(this TAssignable textAlignmentControl)
		where TAssignable : {{textAlignmentClassMetadata.Namespace}}.{{textAlignmentClassMetadata.ClassName}}{{textAlignmentClassMetadata.GenericArguments}}{{textAlignmentClassMetadata.GenericConstraints}}
       {
           ArgumentNullException.ThrowIfNull(textAlignmentControl);

           if (textAlignmentControl is not ITextAlignment)
           {
               throw new ArgumentException($"Element must implement {nameof(ITextAlignment)}", nameof(textAlignmentControl));
           }

           textAlignmentControl.HorizontalTextAlignment = TextAlignment.Start;
           return textAlignmentControl;
       }

       /// <summary>
       /// <see cref="ITextAlignment.HorizontalTextAlignment"/> = <see cref="TextAlignment.Center"/>
       /// </summary>
       /// <param name="textAlignmentControl"></param>
       /// <returns><typeparamref name="TAssignable"/> with added <see cref="TextAlignment.Center"/></returns>
       public static TAssignable TextCenterHorizontal{{textAlignmentClassMetadata.GenericTypeParameters}}(this TAssignable textAlignmentControl)
		where TAssignable : {{textAlignmentClassMetadata.Namespace}}.{{textAlignmentClassMetadata.ClassName}}{{textAlignmentClassMetadata.GenericArguments}}{{textAlignmentClassMetadata.GenericConstraints}}
       {
           ArgumentNullException.ThrowIfNull(textAlignmentControl);

           if (textAlignmentControl is not ITextAlignment)
           {
               throw new ArgumentException($"Element must implement {nameof(ITextAlignment)}", nameof(textAlignmentControl));
           }

           textAlignmentControl.HorizontalTextAlignment = TextAlignment.Center;
           return textAlignmentControl;
       }

       /// <summary>
       /// <see cref="ITextAlignment.HorizontalTextAlignment"/> = <see cref="TextAlignment.End"/>
       /// </summary>
       /// <param name="textAlignmentControl"></param>
       /// <returns><typeparamref name="TAssignable"/> with added <see cref="TextAlignment.End"/></returns>
       public static TAssignable TextEnd{{textAlignmentClassMetadata.GenericTypeParameters}}(this TAssignable textAlignmentControl)
		where TAssignable : {{textAlignmentClassMetadata.Namespace}}.{{textAlignmentClassMetadata.ClassName}}{{textAlignmentClassMetadata.GenericArguments}}{{textAlignmentClassMetadata.GenericConstraints}}
       {
           ArgumentNullException.ThrowIfNull(textAlignmentControl);

           if (textAlignmentControl is not ITextAlignment)
           {
               throw new ArgumentException($"Element must implement {nameof(ITextAlignment)}", nameof(textAlignmentControl));
           }

           textAlignmentControl.HorizontalTextAlignment = TextAlignment.End;
           return textAlignmentControl;
       }

       /// <summary>
       /// <see cref="ITextAlignment.VerticalTextAlignment"/> = <see cref="TextAlignment.Start"/>
       /// </summary>
       /// <param name="textAlignmentControl"></param>
       /// <returns><typeparamref name="TAssignable"/> with added <see cref="TextAlignment.Start"/></returns>
       public static TAssignable TextTop{{textAlignmentClassMetadata.GenericTypeParameters}}(this TAssignable textAlignmentControl)
		where TAssignable : {{textAlignmentClassMetadata.Namespace}}.{{textAlignmentClassMetadata.ClassName}}{{textAlignmentClassMetadata.GenericArguments}}{{textAlignmentClassMetadata.GenericConstraints}}
       {
           ArgumentNullException.ThrowIfNull(textAlignmentControl);

           if (textAlignmentControl is not ITextAlignment)
           {
               throw new ArgumentException($"Element must implement {nameof(ITextAlignment)}", nameof(textAlignmentControl));
           }

           textAlignmentControl.VerticalTextAlignment = TextAlignment.Start;
           return textAlignmentControl;
       }

       /// <summary>
       /// <see cref="ITextAlignment.VerticalTextAlignment"/> = <see cref="TextAlignment.Center"/>
       /// </summary>
       /// <param name="textAlignmentControl"></param>
       /// <returns><typeparamref name="TAssignable"/> with added <see cref="TextAlignment.Center"/></returns>
       public static TAssignable TextCenterVertical{{textAlignmentClassMetadata.GenericTypeParameters}}(this TAssignable textAlignmentControl)
		where TAssignable : {{textAlignmentClassMetadata.Namespace}}.{{textAlignmentClassMetadata.ClassName}}{{textAlignmentClassMetadata.GenericArguments}}{{textAlignmentClassMetadata.GenericConstraints}}
       {
           ArgumentNullException.ThrowIfNull(textAlignmentControl);

           if (textAlignmentControl is not ITextAlignment)
           {
               throw new ArgumentException($"Element must implement {nameof(ITextAlignment)}", nameof(textAlignmentControl));
           }

           textAlignmentControl.VerticalTextAlignment = TextAlignment.Center;
           return textAlignmentControl;
       }

       /// <summary>
       /// <see cref="ITextAlignment.VerticalTextAlignment"/> = <see cref="TextAlignment.End"/>
       /// </summary>
       /// <param name="textAlignmentControl"></param>
       /// <returns><typeparamref name="TAssignable"/> with added <see cref="TextAlignment.End"/></returns>
       public static TAssignable TextBottom{{textAlignmentClassMetadata.GenericTypeParameters}}(this TAssignable textAlignmentControl)
		where TAssignable : {{textAlignmentClassMetadata.Namespace}}.{{textAlignmentClassMetadata.ClassName}}{{textAlignmentClassMetadata.GenericArguments}}{{textAlignmentClassMetadata.GenericConstraints}}
       {
           ArgumentNullException.ThrowIfNull(textAlignmentControl);

           if (textAlignmentControl is not ITextAlignment)
           {
               throw new ArgumentException($"Element must implement {nameof(ITextAlignment)}", nameof(textAlignmentControl));
           }

           textAlignmentControl.VerticalTextAlignment = TextAlignment.End;
           return textAlignmentControl;
       }

       /// <summary>
       /// <see cref="ITextAlignment.VerticalTextAlignment"/> = <see cref="ITextAlignment.HorizontalTextAlignment"/> = <see cref="TextAlignment.Center"/>
       /// </summary>
       /// <param name="textAlignmentControl"></param>
       /// <returns><typeparamref name="TAssignable"/> with added <see cref="TextAlignment.Center"/></returns>
       public static TAssignable TextCenter{{textAlignmentClassMetadata.GenericTypeParameters}}(this TAssignable textAlignmentControl)
		where TAssignable : {{textAlignmentClassMetadata.Namespace}}.{{textAlignmentClassMetadata.ClassName}}{{textAlignmentClassMetadata.GenericArguments}}{{textAlignmentClassMetadata.GenericConstraints}}
           => textAlignmentControl.TextCenterHorizontal{{textAlignmentClassMetadata.GenericTypeParameters}}().TextCenterVertical{{textAlignmentClassMetadata.GenericTypeParameters}}();
   }


   // The extensions in these sub-namespaces are designed to be used together with the extensions in the parent namespace.
   // Keep them in a single file for better maintainability

   namespace LeftToRight
   {
       /// <summary>
       /// Extension Methods for <see cref="ITextAlignment"/>
       /// </summary>
       [global::System.CodeDom.Compiler.GeneratedCode("{{fullClassName}}", "{{assemblyVersion}}")]
       [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
       {{textAlignmentClassMetadata.ClassAccessModifier}} static partial class TextAlignmentExtensions_{{textAlignmentClassMetadata.ClassName}}
       {
           /// <summary>
           /// <see cref="ITextAlignment.HorizontalTextAlignment"/> = <see cref="TextAlignment.Start"/>
           /// </summary>
           /// <param name="textAlignmentControl"></param>
           /// <returns><typeparamref name="TAssignable"/> with <see cref="TextAlignment.Start"/></returns>
           public static TAssignable TextLeft{{textAlignmentClassMetadata.GenericTypeParameters}}(this TAssignable textAlignmentControl)
			where TAssignable : {{textAlignmentClassMetadata.Namespace}}.{{textAlignmentClassMetadata.ClassName}}{{textAlignmentClassMetadata.GenericArguments}}{{textAlignmentClassMetadata.GenericConstraints}}
           {
               ArgumentNullException.ThrowIfNull(textAlignmentControl);

               if (textAlignmentControl is not ITextAlignment)
               {
                   throw new ArgumentException($"Element must implement {nameof(ITextAlignment)}", nameof(textAlignmentControl));
               }

               textAlignmentControl.HorizontalTextAlignment = TextAlignment.Start;
               return textAlignmentControl;
           }

           /// <summary>
           /// <see cref="ITextAlignment.HorizontalTextAlignment"/> = <see cref="TextAlignment.End"/>
           /// </summary>
           /// <param name="textAlignmentControl"></param>
           /// <returns><typeparamref name="TAssignable"/> with <see cref="TextAlignment.End"/></returns>
           public static TAssignable TextRight{{textAlignmentClassMetadata.GenericTypeParameters}}(this TAssignable textAlignmentControl) where TAssignable : {{textAlignmentClassMetadata.Namespace}}.{{textAlignmentClassMetadata.ClassName}}{{textAlignmentClassMetadata.GenericArguments}}{{textAlignmentClassMetadata.GenericConstraints}}
           {
               ArgumentNullException.ThrowIfNull(textAlignmentControl);

               if (textAlignmentControl is not ITextAlignment)
               {
                    throw new ArgumentException($"Element must implement {nameof(ITextAlignment)}", nameof(textAlignmentControl));
               }

               textAlignmentControl.HorizontalTextAlignment = TextAlignment.End;
               return textAlignmentControl;
           }
       }
   }

   // The extensions in these sub-namespaces are designed to be used together with the extensions in the parent namespace.
   // Keep them in a single file for better maintainability
   namespace RightToLeft
   {
       /// <summary>
       /// Extension methods for <see cref="ITextAlignment"/>
       /// </summary>
       {{textAlignmentClassMetadata.ClassAccessModifier}} static partial class TextAlignmentExtensions_{{textAlignmentClassMetadata.ClassName}}
       {
           /// <summary>
           /// <see cref="ITextAlignment.HorizontalTextAlignment"/> = <see cref="TextAlignment.End"/>
           /// </summary>
           /// <param name="textAlignmentControl"></param>
           /// <returns><typeparamref name="TAssignable"/> with <see cref="TextAlignment.End"/></returns>
           public static TAssignable TextLeft{{textAlignmentClassMetadata.GenericTypeParameters}}(this TAssignable textAlignmentControl)
			where TAssignable : {{textAlignmentClassMetadata.Namespace}}.{{textAlignmentClassMetadata.ClassName}}{{textAlignmentClassMetadata.GenericArguments}}{{textAlignmentClassMetadata.GenericConstraints}}
           {
               ArgumentNullException.ThrowIfNull(textAlignmentControl);

               if (textAlignmentControl is not ITextAlignment)
               {
                   throw new ArgumentException($"Element must implement {nameof(ITextAlignment)}", nameof(textAlignmentControl));
               }

               textAlignmentControl.HorizontalTextAlignment = TextAlignment.End;
               return textAlignmentControl;
           }

           /// <summary>
           /// <see cref="ITextAlignment.HorizontalTextAlignment"/> = <see cref="TextAlignment.Start"/>
           /// </summary>
           /// <param name="textAlignmentControl"></param>
           /// <returns><typeparamref name="TAssignable"/> with <see cref="TextAlignment.Start"/></returns>
           public static TAssignable TextRight{{textAlignmentClassMetadata.GenericTypeParameters}}(this TAssignable textAlignmentControl)
			where TAssignable : {{textAlignmentClassMetadata.Namespace}}.{{textAlignmentClassMetadata.ClassName}}{{textAlignmentClassMetadata.GenericArguments}}{{textAlignmentClassMetadata.GenericConstraints}}
           {
               ArgumentNullException.ThrowIfNull(textAlignmentControl);

               if (textAlignmentControl is not ITextAlignment)
               {
                   throw new ArgumentException($"Element must implement {nameof(ITextAlignment)}", nameof(textAlignmentControl));
               }

               textAlignmentControl.HorizontalTextAlignment = TextAlignment.Start;
               return textAlignmentControl;
           }
       }
   }
}
""";
}